matched <S> with ^\<\S+\>$
matched ::= with ::=
matched "(" with ^".+"$
matched <S> with ^\<\S+\>$
matched ")" with ^".+"$
matched ;
 with ;
matched <S> with ^\<\S+\>$
matched ::= with ::=
matched <S> with ^\<\S+\>$
matched <S> with ^\<\S+\>$
matched ;
 with ;
matched <S> with ^\<\S+\>$
matched ::= with ::=
matched "(" with ^".+"$
matched ")" with ^".+"$
matched ;
 with ;
delem (terminal,end)
left (rule,<S>)
pos 0
stop 5
no breakes found i=2
equils [(terminal,"("), (rule,<S>), (terminal,")")]
{ (rule,<S>) ::=(terminal,"(")(rule,<S>)(terminal,")") } newrule
stack [(rule,<S>), (terminal,equils), (terminal,"("), (rule,<S>), (terminal,")")]
delem (terminal,end)
left (rule,<S>)
pos 6
stop 10
no breakes found i=2
equils [(rule,<S>), (rule,<S>)]
{ (rule,<S>) ::=(rule,<S>)(rule,<S>) } newrule
stack [(rule,<S>), (terminal,equils), (rule,<S>), (rule,<S>)]
delem (terminal,end)
left (rule,<S>)
pos 11
stop 15
no breakes found i=2
equils [(terminal,"("), (terminal,")")]
{ (rule,<S>) ::=(terminal,"(")(terminal,")") } newrule
stack [(rule,<S>), (terminal,equils), (terminal,"("), (terminal,")")]
oldgrammar
['{ (rule,<S>) ::=(terminal,"(")(rule,<S>)(terminal,")") }', '{ (rule,<S>) ::=(rule,<S>)(rule,<S>) }', '{ (rule,<S>) ::=(terminal,"(")(terminal,")") }']
new grammer
['{ (rule,<S>) ::=(terminal,terminal_"(")(terminal,aux_terminal_"(") }', '{ (rule,<S>) ::=(rule,<S>)(rule,<S>) }', '{ (rule,<S>) ::=(terminal,terminal_"(")(terminal,terminal_")") }', '{ (terminal,terminal_"(") ::=(terminal,"(") }', '{ (terminal,terminal_")") ::=(terminal,")") }', '{ (terminal,terminal_"(") ::=(terminal,"(") }', '{ (terminal,terminal_")") ::=(terminal,")") }', '{ (terminal,aux_terminal_"(") ::=(terminal,aux_<S>)(rule,<S>) }', '{ (terminal,aux_<S>) ::=(terminal,aux_terminal_")")(terminal,terminal_")") }']
product 
 ['{ (rule,<S>) ::=(terminal,terminal_"(")(terminal,aux_terminal_"(") }', '{ (rule,<S>) ::=(rule,<S>)(rule,<S>) }', '{ (rule,<S>) ::=(terminal,terminal_"(")(terminal,terminal_")") }', '{ (terminal,terminal_"(") ::=(terminal,"(") }', '{ (terminal,terminal_")") ::=(terminal,")") }', '{ (terminal,terminal_"(") ::=(terminal,"(") }', '{ (terminal,terminal_")") ::=(terminal,")") }', '{ (terminal,aux_terminal_"(") ::=(terminal,aux_<S>)(rule,<S>) }', '{ (terminal,aux_<S>) ::=(terminal,aux_terminal_")")(terminal,terminal_")") }']
